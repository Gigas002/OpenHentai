<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OpenHentai.WebAPI</name>
    </assembly>
    <members>
        <member name="T:OpenHentai.WebAPI.Controllers.AuthorsController">
            <summary>
            Controller, that works with Author table and it's dependent ones
            </summary>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.AuthorsController.#ctor(OpenHentai.Contexts.AuthorsContextHelper)">
            <inheritdoc/>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.AuthorsController.GetAuthors">
            <summary>
            Get all authors
            </summary>
            <returns>Collection of Authors</returns>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.AuthorsController.GetAuthorAsync(System.UInt64)">
            <summary>
            Get author from database by id
            </summary>
            <param name="id">Author's id</param>
            <returns>Author</returns>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.AuthorsController.GetAuthorsNames">
            <summary>
            Get collection of all authors's names
            </summary>
            <returns>Collection of AuthorsNames</returns>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.AuthorsController.GetAuthorNamesAsync(System.UInt64)">
            <summary>
            Get current author's AuthorsNames
            </summary>
            <param name="id">Author's id</param>
            <returns>Collection of AuthorsNames</returns>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.AuthorsController.GetCirclesAsync(System.UInt64)">
            <summary>
            Get current author's circles
            </summary>
            <param name="id">Author's id</param>
            <returns>Collection of Circle</returns>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.AuthorsController.GetCreationsAsync(System.UInt64)">
            <summary>
            Get current author's creations
            </summary>
            <param name="id">Author's id</param>
            <returns>Collection of AuthorsCreations</returns>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.AuthorsController.GetNamesAsync(System.UInt64)">
            <summary>
            Get current author's names
            </summary>
            <param name="id">Author's id</param>
            <returns>Collection of CreaturesNames</returns>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.AuthorsController.GetTagsAsync(System.UInt64)">
            <summary>
            Get current author's tags
            </summary>
            <param name="id">Author's id</param>
            <returns>Collection of Tag</returns>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.AuthorsController.GetRelationsAsync(System.UInt64)">
            <summary>
            Get current author's relations
            </summary>
            <param name="id">Author's id</param>
            <returns>Collection of CreaturesRelations</returns>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.AuthorsController.PostAuthorAsync(OpenHentai.Creatures.Author)">
             <summary>
             Add author to database
             </summary>
             <param name="author">Author to add</param>
             <remarks>
            
             Minimal request:
            
                 POST /authors
                 { }
            
             </remarks>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.AuthorsController.PostAuthorNamesAsync(System.UInt64,System.Collections.Generic.HashSet{OpenHentai.Descriptors.LanguageSpecificTextInfo})">
             <summary>
             Updates Author with new AuthorsNames, pushed at their own table
             </summary>
             <param name="id">Author's id</param>
             <param name="names">Collection of new names to push</param>
             <remarks>
            
             Example request:
            
                 POST /authors/{id}/author_names
                 [{
                     "text": "taras panis",
                     "language": null
                 }]
            
             </remarks>
             <response code="200">Complete</response>
             <response code="400">Entity with requested id doesn't exist</response>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.AuthorsController.PostNamesAsync(System.UInt64,System.Collections.Generic.HashSet{OpenHentai.Descriptors.LanguageSpecificTextInfo})">
             <summary>
             Updates Author with new names, pushed at their own table
             </summary>
             <param name="id">Author's id</param>
             <param name="names">Collection of new names to push</param>
             <remarks>
            
             Example request:
            
                 POST /authors/{id}/names
                 [{
                     "text": "Test Minato",
                     "language": null
                 }]
            
             </remarks>
             <response code="200">Complete</response>
             <response code="400">Entity with requested id doesn't exist</response>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.AuthorsController.PostRelationsAsync(System.UInt64,System.Collections.Generic.Dictionary{System.UInt64,OpenHentai.Relations.CreatureRelations})">
             <summary>
             Updates Author with new relations to other creatures
             </summary>
             <param name="id">Author's id</param>
             <param name="relations">Dictionary of related creature id and relation type</param>
             <remarks>
            
             Example request:
            
                 POST /authors/{id}/relations
                 {
                     "1": 1,
                     "2": 0
                 }
            
             </remarks>
             <response code="200">Complete</response>
             <response code="400">Entity with requested id doesn't exist</response>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.AuthorsController.PutCirclesAsync(System.UInt64,System.Collections.Generic.HashSet{System.UInt64})">
             <summary>
             Bind Author to collection of Circle
             </summary>
             <param name="id">Author's id</param>
             <param name="circleIds">Collection of Circle ids to bind with this Author</param>
             <remarks>
            
             Example request:
            
                 PUT /authors/{id}/circles
                 [
                     1, 2
                 ]
            
             </remarks>
             <response code="200">Complete</response>
             <response code="400">Entity with requested id doesn't exist</response>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.AuthorsController.PutCreationsAsync(System.UInt64,System.Collections.Generic.Dictionary{System.UInt64,OpenHentai.Roles.AuthorRole})">
             <summary>
             Bind Author to creations
             </summary>
             <param name="id">Author's id</param>
             <param name="creationRoles">Dictionary of creation ids and AuthorRole to bind with this Author</param>
             <remarks>
            
             Sample request:
            
                 PUT /authors/{id}/creations
                 {
                     "1": 3,
                     "4": 2
                 }
            
             </remarks>
             <response code="200">Complete</response>
             <response code="400">Entity with requested id doesn't exist</response>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.AuthorsController.PutTagsAsync(System.UInt64,System.Collections.Generic.HashSet{System.UInt64})">
             <summary>
             Bind Author to tags
             </summary>
             <param name="id">Author's id</param>
             <param name="tagIds">Collection of tag ids to bind with this Author</param>
             <remarks>
            
             Example request:
            
                 PUT /authors/{id}/tags
                 [
                     1, 2
                 ]
            
             </remarks>
             <response code="200">Complete</response>
             <response code="400">Entity with requested id doesn't exist</response>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.AuthorsController.DeleteAuthorAsync(System.UInt64)">
            <summary>
            Delete Author from database
            </summary>
            <param name="id">Id of Author to delete</param>
            <response code="200">Complete</response>
            <response code="400">Entity with requested id doesn't exist</response>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.AuthorsController.DeleteAuthorNamesAsync(System.UInt64,System.Collections.Generic.HashSet{System.UInt64})">
             <summary>
             Delete collection of AuthorsNames, bound to Author
             </summary>
             <param name="id">Author's id</param>
             <param name="nameIds">Collection of names ids to delete</param>
             <remarks>
            
             Example request:
            
                 DELETE /authors/{id}/author_names
                 [
                     1, 2    
                 ]
            
             </remarks>
             <response code="200">Complete</response>
             <response code="400">Entity with requested id doesn't exist</response>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.AuthorsController.DeleteCirclesAsync(System.UInt64,System.Collections.Generic.HashSet{System.UInt64})">
             <summary>
             Delete binding between Author and specified Circles
             </summary>
             <param name="id">Author's id</param>
             <param name="circleIds">Collection of Circle ids to delete binding</param>
             <remarks>
            
             Example request:
            
                 DELETE /authors/{id}/circles
                 [
                     1, 2    
                 ]
            
             </remarks>
             <response code="200">Complete</response>
             <response code="400">Entity with requested id doesn't exist</response>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.AuthorsController.DeleteCreationsAsync(System.UInt64,System.Collections.Generic.HashSet{System.UInt64})">
             <summary>
             Delete binding between Author and specified Creations
             </summary>
             <param name="id">Author's id</param>
             <param name="creationIds">Collection of Creation ids to delete binding</param>
             <remarks>
            
             Example request:
            
                 DELETE /authors/{id}/creations
                 [
                     1, 2    
                 ]
            
             </remarks>
             <response code="200">Complete</response>
             <response code="400">Entity with requested id doesn't exist</response>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.AuthorsController.DeleteNamesAsync(System.UInt64,System.Collections.Generic.HashSet{System.UInt64})">
             <summary>
             Delete collection of names, bound to Author
             </summary>
             <param name="id">Author's id</param>
             <param name="nameIds">Collection of CreturesNames ids to delete</param>
             <remarks>
            
             Example request:
            
                 DELETE /authors/{id}/names
                 [
                     1, 2    
                 ]
            
             </remarks>
             <response code="200">Complete</response>
             <response code="400">Entity with requested id doesn't exist</response>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.AuthorsController.DeleteTagsAsync(System.UInt64,System.Collections.Generic.HashSet{System.UInt64})">
             <summary>
             Delete binding between Author and specified Tags
             </summary>
             <param name="id">Author's id</param>
             <param name="tagIds">Collection of Tag ids to delete binding</param>
             <remarks>
            
             Example request:
            
                 DELETE /authors/{id}/tags
                 [
                     1, 2    
                 ]
            
             </remarks>
             <response code="200">Complete</response>
             <response code="400">Entity with requested id doesn't exist</response>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.AuthorsController.DeleteRelationsAsync(System.UInt64,System.Collections.Generic.HashSet{System.UInt64})">
             <summary>
             Delete binding between Author and specified Creatures
             </summary>
             <param name="id">Author's id</param>
             <param name="relatedIds">Collection of Creature ids to delete binding</param>
             <remarks>
            
             Example request:
            
                 DELETE /authors/{id}/relations
                 [
                     1, 2    
                 ]
            
             </remarks>
             <response code="200">Complete</response>
             <response code="400">Entity with requested id doesn't exist</response>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.AuthorsController.PatchAuthorAsync(System.UInt64,System.Collections.Generic.IEnumerable{SystemTextJsonPatch.Operations.Operation{OpenHentai.Creatures.Author}})">
             <summary>
             Update Author, using json-patch format
             </summary>
             <param name="id">Author's id</param>
             <param name="operations">Collection of json-patch operations</param>
             <remarks>
            
             Example request:
            
                 PATCH /authors/{id}
                 [{
                     "path": "/age",
                     "op": "replace",
                     "value": 30
                 },
                 {
                     "path": "/authornames",
                     "op": "add",
                     "value": [{
                       "author_id": 8,
                       "name": "Test Bubato",
                       "language": null
                     }]
                 }]
            
             </remarks>
             <response code="200">Complete</response>
             <response code="400">Entity with requested id doesn't exist</response>
        </member>
        <member name="T:OpenHentai.WebAPI.Controllers.CharactersController">
            <summary>
            Controller, that works with Characters table and it's dependent ones
            </summary>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.CharactersController.#ctor(OpenHentai.Contexts.CharactersContextHelper)">
            <inheritdoc/>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.CharactersController.GetCharacters">
            <summary>
            Get all characters
            </summary>
            <returns>Collection of Characters</returns>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.CharactersController.GetCharacterAsync(System.UInt64)">
            <summary>
            Get character from database by id
            </summary>
            <param name="id">Character's id</param>
            <returns>Character</returns>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.CharactersController.GetCreationsAsync(System.UInt64)">
            <summary>
            Get current character's creations
            </summary>
            <param name="id">Character's id</param>
            <returns>Collection of CharactersCreations</returns>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.CharactersController.GetNamesAsync(System.UInt64)">
            <summary>
            Get current character's names
            </summary>
            <param name="id">Character's id</param>
            <returns>Collection of CreaturesNames</returns>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.CharactersController.GetTagsAsync(System.UInt64)">
            <summary>
            Get current character's tags
            </summary>
            <param name="id">Character's id</param>
            <returns>Collection of Tag</returns>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.CharactersController.GetRelationsAsync(System.UInt64)">
            <summary>
            Get current character's relations
            </summary>
            <param name="id">Character's id</param>
            <returns>Collection of CreaturesRelations</returns>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.CharactersController.PostCharacterAsync(OpenHentai.Creatures.Character)">
             <summary>
             Add character to database
             </summary>
             <param name="character">Character to add</param>
             <remarks>
            
             Minimal request:
            
                 POST /characters
                 { }
            
             </remarks>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.CharactersController.PostNamesAsync(System.UInt64,System.Collections.Generic.HashSet{OpenHentai.Descriptors.LanguageSpecificTextInfo})">
             <summary>
             Updates Character with new names, pushed at their own table
             </summary>
             <param name="id">Character's id</param>
             <param name="names">Collection of new names to push</param>
             <remarks>
            
             Example request:
            
                 POST /characters/{id}/names
                 [{
                     "text": "Test Minato",
                     "language": null
                 }]
            
             </remarks>
             <response code="200">Complete</response>
             <response code="400">Entity with requested id doesn't exist</response>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.CharactersController.PostRelationsAsync(System.UInt64,System.Collections.Generic.Dictionary{System.UInt64,OpenHentai.Relations.CreatureRelations})">
             <summary>
             Updates Character with new relations to other creatures
             </summary>
             <param name="id">Character's id</param>
             <param name="relations">Dictionary of related creature id and relation type</param>
             <remarks>
            
             Example request:
            
                 POST /characters/{id}/relations
                 {
                     "1": 1,
                     "2": 0
                 }
            
             </remarks>
             <response code="200">Complete</response>
             <response code="400">Entity with requested id doesn't exist</response>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.CharactersController.PutCreationsAsync(System.UInt64,System.Collections.Generic.Dictionary{System.UInt64,OpenHentai.Roles.CharacterRole})">
             <summary>
             Bind Character to creations
             </summary>
             <param name="id">Character's id</param>
             <param name="creationRoles">Dictionary of creation ids and CharacterRole to bind with this Character</param>
             <remarks>
            
             Sample request:
            
                 PUT /characters/{id}/creations
                 {
                     "1": 3,
                     "4": 2
                 }
            
             </remarks>
             <response code="200">Complete</response>
             <response code="400">Entity with requested id doesn't exist</response>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.CharactersController.PutTagsAsync(System.UInt64,System.Collections.Generic.HashSet{System.UInt64})">
             <summary>
             Bind Character to tags
             </summary>
             <param name="id">Character's id</param>
             <param name="tagIds">Collection of tag ids to bind with this Character</param>
             <remarks>
            
             Example request:
            
                 PUT /characters/{id}/tags
                 [
                     1, 2
                 ]
            
             </remarks>
             <response code="200">Complete</response>
             <response code="400">Entity with requested id doesn't exist</response>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.CharactersController.DeleteCharacterAsync(System.UInt64)">
            <summary>
            Delete Character from database
            </summary>
            <param name="id">Id of Character to delete</param>
            <response code="200">Complete</response>
            <response code="400">Entity with requested id doesn't exist</response>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.CharactersController.DeleteCreationsAsync(System.UInt64,System.Collections.Generic.HashSet{System.UInt64})">
             <summary>
             Delete binding between Character and specified Creations
             </summary>
             <param name="id">Character's id</param>
             <param name="creationIds">Collection of Creation ids to delete binding</param>
             <remarks>
            
             Example request:
            
                 DELETE /characters/{id}/creations
                 [
                     1, 2    
                 ]
            
             </remarks>
             <response code="200">Complete</response>
             <response code="400">Entity with requested id doesn't exist</response>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.CharactersController.DeleteNamesAsync(System.UInt64,System.Collections.Generic.HashSet{System.UInt64})">
             <summary>
             Delete collection of names, bound to Character
             </summary>
             <param name="id">Character's id</param>
             <param name="nameIds">Collection of CreturesNames ids to delete</param>
             <remarks>
            
             Example request:
            
                 DELETE /characters/{id}/names
                 [
                     1, 2    
                 ]
            
             </remarks>
             <response code="200">Complete</response>
             <response code="400">Entity with requested id doesn't exist</response>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.CharactersController.DeleteTagsAsync(System.UInt64,System.Collections.Generic.HashSet{System.UInt64})">
             <summary>
             Delete binding between Character and specified Tags
             </summary>
             <param name="id">Character's id</param>
             <param name="tagIds">Collection of Tag ids to delete binding</param>
             <remarks>
            
             Example request:
            
                 DELETE /characters/{id}/tags
                 [
                     1, 2    
                 ]
            
             </remarks>
             <response code="200">Complete</response>
             <response code="400">Entity with requested id doesn't exist</response>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.CharactersController.DeleteRelationsAsync(System.UInt64,System.Collections.Generic.HashSet{System.UInt64})">
             <summary>
             Delete binding between Character and specified Creatures
             </summary>
             <param name="id">Character's id</param>
             <param name="relatedIds">Collection of Creature ids to delete binding</param>
             <remarks>
            
             Example request:
            
                 DELETE /characters/{id}/relations
                 [
                     1, 2    
                 ]
            
             </remarks>
             <response code="200">Complete</response>
             <response code="400">Entity with requested id doesn't exist</response>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.CharactersController.PatchCharacterAsync(System.UInt64,System.Collections.Generic.IEnumerable{SystemTextJsonPatch.Operations.Operation{OpenHentai.Creatures.Character}})">
             <summary>
             Update Character, using json-patch format
             </summary>
             <param name="id">Character's id</param>
             <param name="operations">Collection of json-patch operations</param>
             <remarks>
            
             Example request:
            
                 PATCH /characters/{id}
                 [{
                     "path": "/age",
                     "op": "replace",
                     "value": 30
                 },
                 {
                     "path": "/names",
                     "op": "add",
                     "value": [{
                       "character_id": 8,
                       "name": "Test Bubato",
                       "language": null
                     }]
                 }]
            
             </remarks>
             <response code="200">Complete</response>
             <response code="400">Entity with requested id doesn't exist</response>
        </member>
        <member name="T:OpenHentai.WebAPI.Controllers.CirclesController">
            <summary>
            Controller, that works with Circle table and it's dependent ones
            </summary>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.CirclesController.#ctor(OpenHentai.Contexts.CirclesContextHelper)">
            <inheritdoc/>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.CirclesController.GetCircles">
            <summary>
            Get all circles
            </summary>
            <returns>Collection of Circles</returns>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.CirclesController.GetCircleAsync(System.UInt64)">
            <summary>
            Get circle from database by id
            </summary>
            <param name="id">Circle's id</param>
            <returns>Circle</returns>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.CirclesController.GetAllTitles">
            <summary>
            Get collection of all circles's titles
            </summary>
            <returns>Collection of CirclesTitles</returns>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.CirclesController.GetTitlesAsync(System.UInt64)">
            <summary>
            Get current circle's titles
            </summary>
            <param name="id">Circle's id</param>
            <returns>Collection of CirclesTitles</returns>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.CirclesController.GetAuthorsAsync(System.UInt64)">
            <summary>
            Get current circle's authors
            </summary>
            <param name="id">Circle's id</param>
            <returns>Collection of Authors</returns>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.CirclesController.GetCreationsAsync(System.UInt64)">
            <summary>
            Get current circle's creations
            </summary>
            <param name="id">Circle's id</param>
            <returns>Collection of Creations</returns>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.CirclesController.GetTagsAsync(System.UInt64)">
            <summary>
            Get current circle's tags
            </summary>
            <param name="id">Circle's id</param>
            <returns>Collection of Tag</returns>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.CirclesController.PostCircleAsync(OpenHentai.Circles.Circle)">
             <summary>
             Add circle to database
             </summary>
             <param name="circle">Circle to add</param>
             <remarks>
            
             Minimal request:
            
                 POST /circles
                 { }
            
             </remarks>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.CirclesController.PostTitlesAsync(System.UInt64,System.Collections.Generic.HashSet{OpenHentai.Descriptors.LanguageSpecificTextInfo})">
             <summary>
             Updates Circle with new titles, pushed at their own table
             </summary>
             <param name="id">Circle's id</param>
             <param name="titles">Collection of new titles to push</param>
             <remarks>
            
             Example request:
            
                 POST /circles/{id}/titles
                 [{
                     "text": "taras panis",
                     "language": null
                 }]
            
             </remarks>
             <response code="200">Complete</response>
             <response code="400">Entity with requested id doesn't exist</response>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.CirclesController.PutAuthorsAsync(System.UInt64,System.Collections.Generic.HashSet{System.UInt64})">
             <summary>
             Bind Circle to collection of Authors
             </summary>
             <param name="id">Circle's id</param>
             <param name="authorsIds">Collection of Authors ids to bind with this Circle</param>
             <remarks>
            
             Example request:
            
                 PUT /circles/{id}/authors
                 [
                     1, 2
                 ]
            
             </remarks>
             <response code="200">Complete</response>
             <response code="400">Entity with requested id doesn't exist</response>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.CirclesController.PutCreationsAsync(System.UInt64,System.Collections.Generic.HashSet{System.UInt64})">
             <summary>
             Bind Circle to creations
             </summary>
             <param name="id">Circle's id</param>
             <param name="creationIds">Collection of creation ids to bind with this Circle</param>
             <remarks>
            
             Sample request:
            
                 PUT /circles/{id}/creations
                 [
                     1, 2    
                 ]
            
             </remarks>
             <response code="200">Complete</response>
             <response code="400">Entity with requested id doesn't exist</response>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.CirclesController.PutTagsAsync(System.UInt64,System.Collections.Generic.HashSet{System.UInt64})">
             <summary>
             Bind Circle to tags
             </summary>
             <param name="id">Circle's id</param>
             <param name="tagIds">Collection of tag ids to bind with this Circle</param>
             <remarks>
            
             Example request:
            
                 PUT /circles/{id}/tags
                 [
                     1, 2
                 ]
            
             </remarks>
             <response code="200">Complete</response>
             <response code="400">Entity with requested id doesn't exist</response>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.CirclesController.DeleteCircleAsync(System.UInt64)">
            <summary>
            Delete Circle from database
            </summary>
            <param name="id">Id of Circle to delete</param>
            <response code="200">Complete</response>
            <response code="400">Entity with requested id doesn't exist</response>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.CirclesController.DeleteTitlesAsync(System.UInt64,System.Collections.Generic.HashSet{System.UInt64})">
             <summary>
             Delete collection of titles, bound to Circle
             </summary>
             <param name="id">Circle's id</param>
             <param name="titleIds">Collection of titles ids to delete</param>
             <remarks>
            
             Example request:
            
                 DELETE /circles/{id}/titles
                 [
                     1, 2    
                 ]
            
             </remarks>
             <response code="200">Complete</response>
             <response code="400">Entity with requested id doesn't exist</response>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.CirclesController.DeleteAuthorsAsync(System.UInt64,System.Collections.Generic.HashSet{System.UInt64})">
             <summary>
             Delete binding between Circle and specified Authors
             </summary>
             <param name="id">Circle's id</param>
             <param name="authorIds">Collection of Author ids to delete binding</param>
             <remarks>
            
             Example request:
            
                 DELETE /circles/{id}/authors
                 [
                     1, 2    
                 ]
            
             </remarks>
             <response code="200">Complete</response>
             <response code="400">Entity with requested id doesn't exist</response>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.CirclesController.DeleteCreationsAsync(System.UInt64,System.Collections.Generic.HashSet{System.UInt64})">
             <summary>
             Delete binding between Circle and specified Creations
             </summary>
             <param name="id">Circle's id</param>
             <param name="creationIds">Collection of Creation ids to delete binding</param>
             <remarks>
            
             Example request:
            
                 DELETE /circles/{id}/creations
                 [
                     1, 2    
                 ]
            
             </remarks>
             <response code="200">Complete</response>
             <response code="400">Entity with requested id doesn't exist</response>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.CirclesController.DeleteTagsAsync(System.UInt64,System.Collections.Generic.HashSet{System.UInt64})">
             <summary>
             Delete binding between Circle and specified Tags
             </summary>
             <param name="id">Circle's id</param>
             <param name="tagIds">Collection of Tag ids to delete binding</param>
             <remarks>
            
             Example request:
            
                 DELETE /circles/{id}/tags
                 [
                     1, 2    
                 ]
            
             </remarks>
             <response code="200">Complete</response>
             <response code="400">Entity with requested id doesn't exist</response>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.CirclesController.PatchCircleAsync(System.UInt64,System.Collections.Generic.IEnumerable{SystemTextJsonPatch.Operations.Operation{OpenHentai.Circles.Circle}})">
             <summary>
             Update Circle, using json-patch format
             </summary>
             <param name="id">Circle's id</param>
             <param name="operations">Collection of json-patch operations</param>
             <remarks>
            
             Example request:
            
                 PATCH /circles/{id}
                 [{
                     "path": "/age",
                     "op": "replace",
                     "value": 30
                 },
                 {
                     "path": "/circlenames",
                     "op": "add",
                     "value": [{
                       "circle_id": 8,
                       "name": "Test Bubato",
                       "language": null
                     }]
                 }]
            
             </remarks>
             <response code="200">Complete</response>
             <response code="400">Entity with requested id doesn't exist</response>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.DatabaseController`1.#ctor(`0)">
            <summary>
            Initialize database context
            </summary>
        </member>
        <member name="T:OpenHentai.WebAPI.Controllers.MangaController">
            <summary>
            Controller, that works with Manga table and it's dependent ones
            </summary>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.MangaController.#ctor(OpenHentai.Contexts.MangaContextHelper)">
            <inheritdoc/>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.MangaController.GetManga">
            <summary>
            Get all manga
            </summary>
            <returns>Collection of Manga</returns>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.MangaController.GetMangaAsync(System.UInt64)">
            <summary>
            Get manga from database by id
            </summary>
            <param name="id">Manga's id</param>
            <returns>Manga</returns>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.MangaController.GetTitlesAsync(System.UInt64)">
            <summary>
            Get current manga's titles
            </summary>
            <param name="id">Manga's id</param>
            <returns>Collection of titles</returns>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.MangaController.GetAuthorsAsync(System.UInt64)">
            <summary>
            Get current manga's authors
            </summary>
            <param name="id">Manga's id</param>
            <returns>Collection of AuthorsCreations</returns>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.MangaController.GetCirclesAsync(System.UInt64)">
            <summary>
            Get current manga's circles
            </summary>
            <param name="id">Manga's id</param>
            <returns>Collection of Circle</returns>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.MangaController.GetRelationsAsync(System.UInt64)">
            <summary>
            Get current manga's relations
            </summary>
            <param name="id">Manga's id</param>
            <returns>Collection of CreaturesRelations</returns>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.MangaController.GetCharactersAsync(System.UInt64)">
            <summary>
            Get current manga's characters
            </summary>
            <param name="id">Manga's id</param>
            <returns>Collection of CreationsCharacters</returns>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.MangaController.GetTagsAsync(System.UInt64)">
            <summary>
            Get current manga's tags
            </summary>
            <param name="id">Manga's id</param>
            <returns>Collection of Tag</returns>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.MangaController.PostMangaAsync(OpenHentai.Creations.Manga)">
             <summary>
             Add manga to database
             </summary>
             <param name="manga">Manga to add</param>
             <remarks>
            
             Minimal request:
            
                 POST /manga
                 { }
            
             </remarks>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.MangaController.PostTitlesAsync(System.UInt64,System.Collections.Generic.HashSet{OpenHentai.Descriptors.LanguageSpecificTextInfo})">
             <summary>
             Updates Manga with new titles, pushed at their own table
             </summary>
             <param name="id">Manga's id</param>
             <param name="titles">Collection of new titles to push</param>
             <remarks>
            
             Example request:
            
                 POST /manga/{id}/titles
                 [{
                     "text": "taras panis",
                     "language": null
                 }]
            
             </remarks>
             <response code="200">Complete</response>
             <response code="400">Entity with requested id doesn't exist</response>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.MangaController.PostRelationsAsync(System.UInt64,System.Collections.Generic.Dictionary{System.UInt64,OpenHentai.Relations.CreationRelations})">
             <summary>
             Updates Manga with new relations to other creations
             </summary>
             <param name="id">Manga's id</param>
             <param name="relations">Dictionary of related creation id and relation type</param>
             <remarks>
            
             Example request:
            
                 POST /manga/{id}/relations
                 {
                     "1": 1,
                     "2": 0
                 }
            
             </remarks>
             <response code="200">Complete</response>
             <response code="400">Entity with requested id doesn't exist</response>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.MangaController.PutAuthorsAsync(System.UInt64,System.Collections.Generic.Dictionary{System.UInt64,OpenHentai.Roles.AuthorRole})">
             <summary>
             Bind Manga to authors
             </summary>
             <param name="id">Manga's id</param>
             <param name="authorRoles">Dictionary of author ids and AuthorRole to bind with this Manga</param>
             <remarks>
            
             Sample request:
            
                 PUT /manga/{id}/authors
                 {
                     "1": 3,
                     "4": 2
                 }
            
             </remarks>
             <response code="200">Complete</response>
             <response code="400">Entity with requested id doesn't exist</response>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.MangaController.PutCirclesAsync(System.UInt64,System.Collections.Generic.HashSet{System.UInt64})">
             <summary>
             Bind Manga to collection of Circle
             </summary>
             <param name="id">Manga's id</param>
             <param name="circleIds">Collection of Circle ids to bind with this Manga</param>
             <remarks>
            
             Example request:
            
                 PUT /manga/{id}/circles
                 [
                     1, 2
                 ]
            
             </remarks>
             <response code="200">Complete</response>
             <response code="400">Entity with requested id doesn't exist</response>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.MangaController.PutCharactersAsync(System.UInt64,System.Collections.Generic.Dictionary{System.UInt64,OpenHentai.Roles.CharacterRole})">
             <summary>
             Bind Manga to characters
             </summary>
             <param name="id">Manga's id</param>
             <param name="characterRoles">Dictionary of character ids and CharacterRole to bind with this Manga</param>
             <remarks>
            
             Sample request:
            
                 PUT /manga/{id}/characters
                 {
                     "1": 3,
                     "4": 2
                 }
            
             </remarks>
             <response code="200">Complete</response>
             <response code="400">Entity with requested id doesn't exist</response>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.MangaController.PutTagsAsync(System.UInt64,System.Collections.Generic.HashSet{System.UInt64})">
             <summary>
             Bind Manga to tags
             </summary>
             <param name="id">Manga's id</param>
             <param name="tagIds">Collection of tag ids to bind with this Manga</param>
             <remarks>
            
             Example request:
            
                 PUT /manga/{id}/tags
                 [
                     1, 2
                 ]
            
             </remarks>
             <response code="200">Complete</response>
             <response code="400">Entity with requested id doesn't exist</response>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.MangaController.DeleteMangaAsync(System.UInt64)">
            <summary>
            Delete Manga from database
            </summary>
            <param name="id">Id of Manga to delete</param>
            <response code="200">Complete</response>
            <response code="400">Entity with requested id doesn't exist</response>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.MangaController.DeleteTitlesAsync(System.UInt64,System.Collections.Generic.HashSet{System.UInt64})">
             <summary>
             Delete collection of titles, bound to Manga
             </summary>
             <param name="id">Manga's id</param>
             <param name="titleIds">Collection of title ids to delete</param>
             <remarks>
            
             Example request:
            
                 DELETE /manga/{id}/titles
                 [
                     1, 2    
                 ]
            
             </remarks>
             <response code="200">Complete</response>
             <response code="400">Entity with requested id doesn't exist</response>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.MangaController.DeleteAuthorsAsync(System.UInt64,System.Collections.Generic.HashSet{System.UInt64})">
             <summary>
             Delete binding between Manga and specified Authors
             </summary>
             <param name="id">Manga's id</param>
             <param name="authorIds">Collection of Author ids to delete binding</param>
             <remarks>
            
             Example request:
            
                 DELETE /manga/{id}/authors
                 [
                     1, 2    
                 ]
            
             </remarks>
             <response code="200">Complete</response>
             <response code="400">Entity with requested id doesn't exist</response>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.MangaController.DeleteCirclesAsync(System.UInt64,System.Collections.Generic.HashSet{System.UInt64})">
             <summary>
             Delete binding between Manga and specified Circles
             </summary>
             <param name="id">Manga's id</param>
             <param name="circleIds">Collection of Circle ids to delete binding</param>
             <remarks>
            
             Example request:
            
                 DELETE /manga/{id}/circles
                 [
                     1, 2    
                 ]
            
             </remarks>
             <response code="200">Complete</response>
             <response code="400">Entity with requested id doesn't exist</response>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.MangaController.DeleteRelationsAsync(System.UInt64,System.Collections.Generic.HashSet{System.UInt64})">
             <summary>
             Delete binding between Manga and specified Creatures
             </summary>
             <param name="id">Manga's id</param>
             <param name="relatedIds">Collection of Creature ids to delete binding</param>
             <remarks>
            
             Example request:
            
                 DELETE /manga/{id}/relations
                 [
                     1, 2    
                 ]
            
             </remarks>
             <response code="200">Complete</response>
             <response code="400">Entity with requested id doesn't exist</response>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.MangaController.DeleteCharactersAsync(System.UInt64,System.Collections.Generic.HashSet{System.UInt64})">
             <summary>
             Delete binding between Manga and specified Characters
             </summary>
             <param name="id">Manga's id</param>
             <param name="characterIds">Collection of Character ids to delete binding</param>
             <remarks>
            
             Example request:
            
                 DELETE /manga/{id}/characters
                 [
                     1, 2    
                 ]
            
             </remarks>
             <response code="200">Complete</response>
             <response code="400">Entity with requested id doesn't exist</response>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.MangaController.DeleteTagsAsync(System.UInt64,System.Collections.Generic.HashSet{System.UInt64})">
             <summary>
             Delete binding between Manga and specified Tags
             </summary>
             <param name="id">Manga's id</param>
             <param name="tagIds">Collection of Tag ids to delete binding</param>
             <remarks>
            
             Example request:
            
                 DELETE /manga/{id}/tags
                 [
                     1, 2    
                 ]
            
             </remarks>
             <response code="200">Complete</response>
             <response code="400">Entity with requested id doesn't exist</response>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.MangaController.PatchMangaAsync(System.UInt64,System.Collections.Generic.IEnumerable{SystemTextJsonPatch.Operations.Operation{OpenHentai.Creations.Manga}})">
             <summary>
             Update Manga, using json-patch format
             </summary>
             <param name="id">Manga's id</param>
             <param name="operations">Collection of json-patch operations</param>
             <remarks>
            
             Example request:
            
                 PATCH /manga/{id}
                 [{
                     "path": "/age",
                     "op": "replace",
                     "value": 30
                 },
                 {
                     "path": "/manganames",
                     "op": "add",
                     "value": [{
                       "manga_id": 8,
                       "name": "Test Bubato",
                       "language": null
                     }]
                 }]
            
             </remarks>
             <response code="200">Complete</response>
             <response code="400">Entity with requested id doesn't exist</response>
        </member>
        <member name="T:OpenHentai.WebAPI.Controllers.TagsController">
            <summary>
            Controller, that works with Tag table and it's dependent ones
            </summary>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.TagsController.#ctor(OpenHentai.Contexts.TagsContextHelper)">
            <inheritdoc/>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.TagsController.GetTags">
            <summary>
            Get all tags
            </summary>
            <returns>Collection of Tags</returns>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.TagsController.GetTagAsync(System.UInt64)">
            <summary>
            Get tag from database by id
            </summary>
            <param name="id">Tag's id</param>
            <returns>Tag</returns>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.TagsController.GetCreaturesAsync(System.UInt64)">
            <summary>
            Get current tag's creatures
            </summary>
            <param name="id">Tag's id</param>
            <returns>Collection of Creature</returns>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.TagsController.GetCreationsAsync(System.UInt64)">
            <summary>
            Get current tag's creations
            </summary>
            <param name="id">Tag's id</param>
            <returns>Collection of Creation</returns>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.TagsController.GetCirclesAsync(System.UInt64)">
            <summary>
            Get current tag's circles
            </summary>
            <param name="id">Tag's id</param>
            <returns>Collection of Circle</returns>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.TagsController.PostTagAsync(OpenHentai.Tags.Tag)">
             <summary>
             Add tag to database
             </summary>
             <param name="tag">Tag to add</param>
             <remarks>
            
             Minimal request:
            
                 POST /tags
                 { }
            
             </remarks>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.TagsController.PutCreaturesAsync(System.UInt64,System.Collections.Generic.HashSet{System.UInt64})">
             <summary>
             Bind Tag to collection of Creature
             </summary>
             <param name="id">Tag's id</param>
             <param name="creatureIds">Collection of creature ids to bind with this Tag</param>
             <remarks>
            
             Example request:
            
                 PUT /tags/{id}/creatures
                 [
                     1, 2
                 ]
            
             </remarks>
             <response code="200">Complete</response>
             <response code="400">Entity with requested id doesn't exist</response>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.TagsController.PutCreationsAsync(System.UInt64,System.Collections.Generic.HashSet{System.UInt64})">
             <summary>
             Bind Tag to creations
             </summary>
             <param name="id">Tag's id</param>
             <param name="creationIds">Collection of creation ids to bind with this Tag</param>
             <remarks>
            
             Sample request:
            
                 PUT /tags/{id}/creations
                 [
                     1, 2
                 ]
            
             </remarks>
             <response code="200">Complete</response>
             <response code="400">Entity with requested id doesn't exist</response>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.TagsController.PutCirclesAsync(System.UInt64,System.Collections.Generic.HashSet{System.UInt64})">
             <summary>
             Bind Tag to collection of Circle
             </summary>
             <param name="id">Tag's id</param>
             <param name="circleIds">Collection of Circle ids to bind with this Tag</param>
             <remarks>
            
             Example request:
            
                 PUT /tags/{id}/circles
                 [
                     1, 2
                 ]
            
             </remarks>
             <response code="200">Complete</response>
             <response code="400">Entity with requested id doesn't exist</response>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.TagsController.DeleteTagAsync(System.UInt64)">
            <summary>
            Delete Tag from database
            </summary>
            <param name="id">Id of Tag to delete</param>
            <response code="200">Complete</response>
            <response code="400">Entity with requested id doesn't exist</response>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.TagsController.DeleteCreaturesAsync(System.UInt64,System.Collections.Generic.HashSet{System.UInt64})">
             <summary>
             Delete binding between Tag and specified Creatures
             </summary>
             <param name="id">Tag's id</param>
             <param name="creatureIds">Collection of Creature ids to delete binding</param>
             <remarks>
            
             Example request:
            
                 DELETE /tags/{id}/creatures
                 [
                     1, 2    
                 ]
            
             </remarks>
             <response code="200">Complete</response>
             <response code="400">Entity with requested id doesn't exist</response>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.TagsController.DeleteCreationsAsync(System.UInt64,System.Collections.Generic.HashSet{System.UInt64})">
             <summary>
             Delete binding between Tag and specified Creations
             </summary>
             <param name="id">Tag's id</param>
             <param name="creationIds">Collection of Creation ids to delete binding</param>
             <remarks>
            
             Example request:
            
                 DELETE /tags/{id}/creations
                 [
                     1, 2    
                 ]
            
             </remarks>
             <response code="200">Complete</response>
             <response code="400">Entity with requested id doesn't exist</response>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.TagsController.DeleteCirclesAsync(System.UInt64,System.Collections.Generic.HashSet{System.UInt64})">
             <summary>
             Delete binding between Tag and specified Circles
             </summary>
             <param name="id">Tag's id</param>
             <param name="circleIds">Collection of Circle ids to delete binding</param>
             <remarks>
            
             Example request:
            
                 DELETE /tags/{id}/circles
                 [
                     1, 2    
                 ]
            
             </remarks>
             <response code="200">Complete</response>
             <response code="400">Entity with requested id doesn't exist</response>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.TagsController.PatchTagAsync(System.UInt64,System.Collections.Generic.IEnumerable{SystemTextJsonPatch.Operations.Operation{OpenHentai.Tags.Tag}})">
             <summary>
             Update Tag, using json-patch format
             </summary>
             <param name="id">Tag's id</param>
             <param name="operations">Collection of json-patch operations</param>
             <remarks>
            
             Example request:
            
                 PATCH /tags/{id}
                 [{
                     "path": "/age",
                     "op": "replace",
                     "value": 30
                 },
                 {
                     "path": "/tagnames",
                     "op": "add",
                     "value": [{
                       "tag_id": 8,
                       "name": "Test Bubato",
                       "language": null
                     }]
                 }]
            
             </remarks>
             <response code="200">Complete</response>
             <response code="400">Entity with requested id doesn't exist</response>
        </member>
    </members>
</doc>
