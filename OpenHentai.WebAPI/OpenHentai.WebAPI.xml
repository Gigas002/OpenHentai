<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OpenHentai.WebAPI</name>
    </assembly>
    <members>
        <member name="T:OpenHentai.WebAPI.Controllers.AuthorController">
            <summary>
            Controller, that works with Author table and it's dependent ones
            </summary>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.AuthorController.#ctor(OpenHentai.Contexts.AuthorsContextHelper)">
            <inheritdoc/>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.AuthorController.GetAuthors">
            <summary>
            Get all authors
            </summary>
            <returns>Collection of Authors</returns>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.AuthorController.GetAuthorAsync(System.UInt64)">
            <summary>
            Get author from database by id
            </summary>
            <param name="id">Author's id</param>
            <returns>Author</returns>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.AuthorController.GetAuthorsNames">
            <summary>
            Get collection of all authors's names
            </summary>
            <returns>Collection of AuthorsNames</returns>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.AuthorController.GetAuthorNamesAsync(System.UInt64)">
            <summary>
            Get current author's AuthorsNames
            </summary>
            <param name="id">Author's id</param>
            <returns>Collection of AuthorsNames</returns>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.AuthorController.GetCirclesAsync(System.UInt64)">
            <summary>
            Get current author's circles
            </summary>
            <param name="id">Author's id</param>
            <returns>Collection of Circle</returns>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.AuthorController.GetCreationsAsync(System.UInt64)">
            <summary>
            Get current author's creations
            </summary>
            <param name="id">Author's id</param>
            <returns>Collection of AuthorsCreations</returns>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.AuthorController.GetNamesAsync(System.UInt64)">
            <summary>
            Get current author's names
            </summary>
            <param name="id">Author's id</param>
            <returns>Collection of CreaturesNames</returns>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.AuthorController.GetTagsAsync(System.UInt64)">
            <summary>
            Get current author's tags
            </summary>
            <param name="id">Author's id</param>
            <returns>Collection of Tag</returns>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.AuthorController.GetRelationsAsync(System.UInt64)">
            <summary>
            Get current author's relations
            </summary>
            <param name="id">Author's id</param>
            <returns>Collection of CreaturesRelations</returns>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.AuthorController.PostAuthorAsync(OpenHentai.Creatures.Author)">
             <summary>
             Add author to database
             </summary>
             <param name="author">Author to add</param>
             <remarks>
            
             Minimal request:
            
                 POST /authors
                 { }
            
             </remarks>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.AuthorController.PostAuthorNamesAsync(System.UInt64,System.Collections.Generic.HashSet{OpenHentai.Descriptors.LanguageSpecificTextInfo})">
             <summary>
             Updates Author with new AuthorsNames, pushed at their own table
             </summary>
             <param name="id">Author's id</param>
             <param name="names">Collection of new names to push</param>
             <remarks>
            
             Example request:
            
                 POST /authors/{id}/author_names
                 [{
                     "text": "taras panis",
                     "language": null
                 }]
            
             </remarks>
             <response code="200">Complete</response>
             <response code="400">Entity with requested id doesn't exist</response>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.AuthorController.PostNamesAsync(System.UInt64,System.Collections.Generic.HashSet{OpenHentai.Descriptors.LanguageSpecificTextInfo})">
             <summary>
             Updates Author with new names, pushed at their own table
             </summary>
             <param name="id">Author's id</param>
             <param name="names">Collection of new names to push</param>
             <remarks>
            
             Example request:
            
                 POST /authors/{id}/names
                 [{
                     "text": "Test Minato",
                     "language": null
                 }]
            
             </remarks>
             <response code="200">Complete</response>
             <response code="400">Entity with requested id doesn't exist</response>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.AuthorController.PostRelationsAsync(System.UInt64,System.Collections.Generic.Dictionary{System.UInt64,OpenHentai.Relations.CreatureRelations})">
             <summary>
             Updates Author with new relations to other creatures
             </summary>
             <param name="id">Author's id</param>
             <param name="relations">Dictionary of related creature id and relation type</param>
             <remarks>
            
             Example request:
            
                 POST /authors/{id}/relations
                 {
                     "1": 1,
                     "2": 0
                 }
            
             </remarks>
             <response code="200">Complete</response>
             <response code="400">Entity with requested id doesn't exist</response>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.AuthorController.PutCirclesAsync(System.UInt64,System.Collections.Generic.HashSet{System.UInt64})">
             <summary>
             Bind Author to collection of Circle
             </summary>
             <param name="id">Author's id</param>
             <param name="circleIds">Collection of Circle ids to bind with this Author</param>
             <remarks>
            
             Example request:
            
                 PUT /authors/{id}/circles
                 [
                     1, 2
                 ]
            
             </remarks>
             <response code="200">Complete</response>
             <response code="400">Entity with requested id doesn't exist</response>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.AuthorController.PutCreationsAsync(System.UInt64,System.Collections.Generic.Dictionary{System.UInt64,OpenHentai.Roles.AuthorRole})">
             <summary>
             Bind Author to creations
             </summary>
             <param name="id">Author's id</param>
             <param name="creationRoles">Dictionary of creation ids and AuthorRole to bind with this Author</param>
             <remarks>
            
             Sample request:
            
                 PUT /authors/{id}/creations
                 {
                     "1": 3,
                     "4": 2
                 }
            
             </remarks>
             <response code="200">Complete</response>
             <response code="400">Entity with requested id doesn't exist</response>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.AuthorController.PutTagsAsync(System.UInt64,System.Collections.Generic.HashSet{System.UInt64})">
             <summary>
             Bind Author to tags
             </summary>
             <param name="id">Author's id</param>
             <param name="tagIds">Collection of tag ids to bind with this Author</param>
             <remarks>
            
             Example request:
            
                 PUT /authors/{id}/tags
                 [
                     1, 2
                 ]
            
             </remarks>
             <response code="200">Complete</response>
             <response code="400">Entity with requested id doesn't exist</response>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.AuthorController.DeleteAuthorAsync(System.UInt64)">
            <summary>
            Delete Author from database
            </summary>
            <param name="id">Id of Author to delete</param>
            <response code="200">Complete</response>
            <response code="400">Entity with requested id doesn't exist</response>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.AuthorController.DeleteAuthorNamesAsync(System.UInt64,System.Collections.Generic.HashSet{System.UInt64})">
             <summary>
             Delete collection of AuthorsNames, bound to Author
             </summary>
             <param name="id">Author's id</param>
             <param name="nameIds">Collection of names ids to delete</param>
             <remarks>
            
             Example request:
            
                 DELETE /authors/{id}/author_names
                 [
                     1, 2    
                 ]
            
             </remarks>
             <response code="200">Complete</response>
             <response code="400">Entity with requested id doesn't exist</response>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.AuthorController.DeleteCirclesAsync(System.UInt64,System.Collections.Generic.HashSet{System.UInt64})">
             <summary>
             Delete binding between Author and specified Circles
             </summary>
             <param name="id">Author's id</param>
             <param name="circleIds">Collection of Circle ids to delete binding</param>
             <remarks>
            
             Example request:
            
                 DELETE /authors/{id}/circles
                 [
                     1, 2    
                 ]
            
             </remarks>
             <response code="200">Complete</response>
             <response code="400">Entity with requested id doesn't exist</response>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.AuthorController.DeleteCreationsAsync(System.UInt64,System.Collections.Generic.HashSet{System.UInt64})">
             <summary>
             Delete binding between Author and specified Creations
             </summary>
             <param name="id">Author's id</param>
             <param name="creationIds">Collection of Creation ids to delete binding</param>
             <remarks>
            
             Example request:
            
                 DELETE /authors/{id}/creations
                 [
                     1, 2    
                 ]
            
             </remarks>
             <response code="200">Complete</response>
             <response code="400">Entity with requested id doesn't exist</response>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.AuthorController.DeleteNamesAsync(System.UInt64,System.Collections.Generic.HashSet{System.UInt64})">
             <summary>
             Delete collection of names, bound to Author
             </summary>
             <param name="id">Author's id</param>
             <param name="nameIds">Collection of CreturesNames ids to delete</param>
             <remarks>
            
             Example request:
            
                 DELETE /authors/{id}/names
                 [
                     1, 2    
                 ]
            
             </remarks>
             <response code="200">Complete</response>
             <response code="400">Entity with requested id doesn't exist</response>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.AuthorController.DeleteTagsAsync(System.UInt64,System.Collections.Generic.HashSet{System.UInt64})">
             <summary>
             Delete binding between Author and specified Tags
             </summary>
             <param name="id">Author's id</param>
             <param name="tagIds">Collection of Tag ids to delete binding</param>
             <remarks>
            
             Example request:
            
                 DELETE /authors/{id}/tags
                 [
                     1, 2    
                 ]
            
             </remarks>
             <response code="200">Complete</response>
             <response code="400">Entity with requested id doesn't exist</response>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.AuthorController.DeleteRelationsAsync(System.UInt64,System.Collections.Generic.HashSet{System.UInt64})">
             <summary>
             Delete binding between Author and specified Creatures
             </summary>
             <param name="id">Author's id</param>
             <param name="relatedIds">Collection of Creature ids to delete binding</param>
             <remarks>
            
             Example request:
            
                 DELETE /authors/{id}/relations
                 [
                     1, 2    
                 ]
            
             </remarks>
             <response code="200">Complete</response>
             <response code="400">Entity with requested id doesn't exist</response>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.AuthorController.PatchAuthorAsync(System.UInt64,System.Collections.Generic.IEnumerable{SystemTextJsonPatch.Operations.Operation{OpenHentai.Creatures.Author}})">
             <summary>
             Update Author, using json-patch format
             </summary>
             <param name="id">Author's id</param>
             <param name="operations">Collection of json-patch operations</param>
             <remarks>
            
             Example request:
            
                 PATCH /authors/{id}
                 [{
                     "path": "/age",
                     "op": "replace",
                     "value": 30
                 },
                 {
                     "path": "/authornames",
                     "op": "add",
                     "value": [{
                       "author_id": 8,
                       "name": "Test Bubato",
                       "language": null
                     }]
                 }]
            
             </remarks>
             <response code="200">Complete</response>
             <response code="400">Entity with requested id doesn't exist</response>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.DatabaseController`1.#ctor(`0)">
            <summary>
            Initialize database context
            </summary>
        </member>
        <member name="T:OpenHentai.WebAPI.Controllers.MangaController">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.MangaController.#ctor(OpenHentai.Contexts.DatabaseContext)">
            <summary>
            Database context
            </summary>
        </member>
        <member name="M:OpenHentai.WebAPI.Controllers.MangaController.GetMangaAsync(System.UInt64)">
            <summary>
            Get manga from database by id
            </summary>
            <param name="id">Manga's id</param>
            <returns>Manga</returns>
            <response code="200">Returns requested manga</response>
            <response code="400">Manga is null</response>
        </member>
    </members>
</doc>
